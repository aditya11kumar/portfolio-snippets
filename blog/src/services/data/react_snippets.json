{
  "features": [
    {
      "title": "React Routing with Active Links",
      "description": "Set up routing in a React application with active link highlighting using the useLocation hook.",
      "example": "import React from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link, useLocation } from 'react-router-dom';\n\nfunction Home() {\n  return <h2>Home Page</h2>;\n}\n\nfunction About() {\n  return <h2>About Us</h2>;\n}\n\nfunction Services() {\n  return <h2>Our Services</h2>;\n}\n\nfunction Contact() {\n  return <h2>Contact Us</h2>;\n}\n\nfunction NotFound() {\n  return <h2>404 - Page Not Found</h2>;\n}\n\nfunction Header() {\n  const location = useLocation();\n\n  const isActive = (path) => location.pathname === path;\n\n  return (\n    <nav style={{ display: 'flex', gap: '10px', padding: '10px', backgroundColor: '#f4f4f4' }}>\n      <Link to=\"/\" style={isActive('/') ? { fontWeight: 'bold', color: 'blue' } : {}}>Home</Link>\n      <Link to=\"/about\" style={isActive('/about') ? { fontWeight: 'bold', color: 'blue' } : {}}>About</Link>\n      <Link to=\"/services\" style={isActive('/services') ? { fontWeight: 'bold', color: 'blue' } : {}}>Services</Link>\n      <Link to=\"/contact\" style={isActive('/contact') ? { fontWeight: 'bold', color: 'blue' } : {}}>Contact</Link>\n    </nav>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/services\" element={<Services />} />\n        <Route path=\"/contact\" element={<Contact />} />\n        <Route path=\"*\" element={<NotFound />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;"
    },
    {
      "title": " Layout with Outlet",
      "description": "A layout component with a header, footer, and an Outlet to render nested routes in a React app using React Router.",
      "example": "import { Outlet } from 'react-router-dom';\n\nexport default function App() {\n  return (\n    <div>\n      <p>Header</p>\n      <Outlet />\n      <p>Footer</p>\n    </div>\n  );\n}"
    },
    {
      "title": "Feature-wise Routing in a Large React App",
      "description": "A modular routing approach for a large-scale React app, with each feature (e.g., authentication, dashboard, user profile) having its own routing, layout, and nested routes.",
      "example": "import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\n\n// Layout for Authentication\nfunction AuthLayout() {\n  return (\n    <div>\n      <header>\n        <h1>Authentication</h1>\n      </header>\n      <main>\n        <Outlet />\n      </main>\n      <footer>\n        <p>Auth Footer</p>\n      </footer>\n    </div>\n  );\n}\n\n// Layout for Dashboard\nfunction DashboardLayout() {\n  return (\n    <div>\n      <header>\n        <h1>Dashboard</h1>\n      </header>\n      <main>\n        <Outlet />\n      </main>\n      <footer>\n        <p>Dashboard Footer</p>\n      </footer>\n    </div>\n  );\n}\n\n// Layout for User Profile\nfunction UserProfileLayout() {\n  return (\n    <div>\n      <header>\n        <h1>User Profile</h1>\n      </header>\n      <main>\n        <Outlet />\n      </main>\n      <footer>\n        <p>User Footer</p>\n      </footer>\n    </div>\n  );\n}\n\n// Components for different routes\nfunction Home() {\n  return <h2>The user's home page after authentication.</h2>;\n}\n\nfunction Login() {\n  return <h2>Login page for users to authenticate.</h2>;\n}\n\nfunction Signup() {\n  return <h2>Signup page for new users.</h2>;\n}\n\nfunction Settings() {\n  return <h2>Settings page for managing user preferences.</h2>;\n}\n\nfunction Profile() {\n  return <h2>Displays the user's profile information and allows updates.</h2>;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        {/* Authentication Routes */}\n        <Route path=\"/auth\" element={<AuthLayout />}> \n          <Route path=\"login\" element={<Login />} />\n          <Route path=\"signup\" element={<Signup />} />\n        </Route>\n\n        {/* Dashboard Routes */}\n        <Route path=\"/dashboard\" element={<DashboardLayout />}> \n          <Route path=\"home\" element={<Home />} />\n          <Route path=\"settings\" element={<Settings />} />\n        </Route>\n\n        {/* User Profile Routes */}\n        <Route path=\"/user-profile\" element={<UserProfileLayout />}> \n          <Route path=\"profile\" element={<Profile />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;"
    },
    
    
    {
      "title": "Routing in React",
      "description": "Set up routing with React Router to navigate between pages.",
      "example": "import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Header from './Header';\n\nfunction Home() {\n  return <h2>Welcome to the Home Page</h2>;\n}\n\nfunction About() {\n  return <h2>About Us</h2>;\n}\n\nfunction Contact() {\n  return <h2>Contact Us</h2>;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/details/:id\" element={<Details />} />\n        <Route path=\"/contact\" element={<Contact />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;"
    },
    {
      "title": "React Routing with Outlet",
      "description": "A routing setup using react-router-dom to demonstrate nested routes with Outlet for rendering child components.",
      "example": "import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, Outlet } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/about\">About</Link></li>\n            <li><Link to=\"/dashboard\">Dashboard</Link></li>\n          </ul>\n        </nav>\n\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/dashboard\" element={<DashboardLayout />}>\n            <Route index element={<Dashboard />} />\n            <Route path=\"profile\" element={<Profile />} />\n            <Route path=\"settings\" element={<Settings />} />\n          </Route>\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home Page</h2>;\n}\n\nfunction About() {\n  return <h2>About Page</h2>;\n}\n\nfunction DashboardLayout() {\n  return (\n    <div>\n      <h2>Dashboard</h2>\n      <nav>\n        <ul>\n          <li><Link to=\"/dashboard/profile\">Profile</Link></li>\n          <li><Link to=\"/dashboard/settings\">Settings</Link></li>\n        </ul>\n      </nav>\n      <Outlet />\n    </div>\n  );\n}\n\nfunction Dashboard() {\n  return <h3>Welcome to the Dashboard</h3>;\n}\n\nfunction Profile() {\n  return <h3>Profile Page</h3>;\n}\n\nfunction Settings() {\n  return <h3>Settings Page</h3>;\n}\n\nfunction NotFound() {\n  return <h2>404: Page Not Found</h2>;\n}\n\nexport default App;"
    },    
    {
      "title": "Form with All Input Types and Fetch POST",
      "description": "A React form with various input types (text, number, email, radio, checkbox, select, and textarea). Submits form data to a server using a fetch POST request.",
      "example": "import React, { useState } from 'react';\n\nfunction FormComponent() {\n  const [formData, setFormData] = useState({\n    name: '',\n    age: '',\n    email: '',\n    gender: '',\n    terms: false,\n    country: '',\n    message: ''\n  });\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const response = await fetch('https://example.com/api/submit', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    });\n\n    const data = await response.json();\n    console.log('Form Submitted:', data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label>Age:</label>\n        <input\n          type=\"number\"\n          name=\"age\"\n          value={formData.age}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label>Gender:</label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"gender\"\n            value=\"male\"\n            checked={formData.gender === 'male'}\n            onChange={handleChange}\n          /> Male\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"gender\"\n            value=\"female\"\n            checked={formData.gender === 'female'}\n            onChange={handleChange}\n          /> Female\n        </label>\n      </div>\n\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            name=\"terms\"\n            checked={formData.terms}\n            onChange={handleChange}\n          /> I agree to the terms\n        </label>\n      </div>\n\n      <div>\n        <label>Country:</label>\n        <select\n          name=\"country\"\n          value={formData.country}\n          onChange={handleChange}\n          required\n        >\n          <option value=\"\">Select a Country</option>\n          <option value=\"USA\">USA</option>\n          <option value=\"Canada\">Canada</option>\n          <option value=\"UK\">UK</option>\n        </select>\n      </div>\n\n      <div>\n        <label>Message:</label>\n        <textarea\n          name=\"message\"\n          value={formData.message}\n          onChange={handleChange}\n        ></textarea>\n      </div>\n\n      <div>\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  );\n}\n\nexport default FormComponent;"
    },
    {
      "title": "Editable Table with Fetch and useEffect",
      "description": "A React table component with editable columns, using useEffect to fetch initial data and fetch to save updates.",
      "example": "import React, { useState, useEffect } from 'react';\n\nfunction EditableTable() {\n  const [data, setData] = useState([]);\n  const [editing, setEditing] = useState(null);\n  const [editValue, setEditValue] = useState('');\n\n  useEffect(() => {\n    // Fetch initial data\n    fetch('https://example.com/api/data')\n      .then((response) => response.json())\n      .then((data) => setData(data));\n  }, []);\n\n  const handleEditClick = (id, currentValue) => {\n    setEditing(id);\n    setEditValue(currentValue);\n  };\n\n  const handleSaveClick = async (id) => {\n    const updatedData = data.map((row) =>\n      row.id === id ? { ...row, name: editValue } : row\n    );\n    setData(updatedData);\n    setEditing(null);\n\n    // Save updated data to the server\n    await fetch(`https://example.com/api/data/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name: editValue })\n    });\n  };\n\n  return (\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row) => (\n          <tr key={row.id}>\n            <td>{row.id}</td>\n            <td>\n              {editing === row.id ? (\n                <input\n                  type=\"text\"\n                  value={editValue}\n                  onChange={(e) => setEditValue(e.target.value)}\n                />\n              ) : (\n                row.name\n              )}\n            </td>\n            <td>\n              {editing === row.id ? (\n                <button onClick={() => handleSaveClick(row.id)}>Save</button>\n              ) : (\n                <button onClick={() => handleEditClick(row.id, row.name)}>\n                  Edit\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default EditableTable;"
    },
    {
      "title": "Fetching Data with useEffect",
      "description": "Fetch data from an API and display it in a component.",
      "example": "import React, { useState, useEffect } from 'react';\n\nfunction FetchData() {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n\n  return (\n    <ul>\n      {data.map((item) => (\n        <li key={item.id}>{item.title}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default FetchData;"
    },
    {
      "title": "Editable Table",
      "description": "Create a table where rows can be edited inline.",
      "example": "import React, { useState } from 'react';\n\nfunction EditableTable() {\n  const [data, setData] = useState([\n    { id: 1, name: 'John Doe', age: 28 },\n    { id: 2, name: 'Jane Smith', age: 32 }\n  ]);\n\n  const handleEdit = (id, field, value) => {\n    setData(data.map((row) => (row.id === id ? { ...row, [field]: value } : row)));\n  };\n\n  return (\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row) => (\n          <tr key={row.id}>\n            <td>\n              <input\n                value={row.name}\n                onChange={(e) => handleEdit(row.id, 'name', e.target.value)}\n              />\n            </td>\n            <td>\n              <input\n                type=\"number\"\n                value={row.age}\n                onChange={(e) => handleEdit(row.id, 'age', e.target.value)}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default EditableTable;"
    },
    {
      "title": "Table Sorting",
      "description": "Sort table rows by a specific column.",
      "example": "import React, { useState } from 'react';\n\nfunction SortableTable() {\n  const [data, setData] = useState([\n    { id: 1, name: 'John Doe', age: 28 },\n    { id: 2, name: 'Jane Smith', age: 32 }\n  ]);\n  const [sortConfig, setSortConfig] = useState(null);\n\n  const sortedData = React.useMemo(() => {\n    if (!sortConfig) return data;\n    return [...data].sort((a, b) => {\n      if (a[sortConfig.key] < b[sortConfig.key]) return sortConfig.direction === 'ascending' ? -1 : 1;\n      if (a[sortConfig.key] > b[sortConfig.key]) return sortConfig.direction === 'ascending' ? 1 : -1;\n      return 0;\n    });\n  }, [data, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return (\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>\n            <button onClick={() => requestSort('name')}>Name</button>\n          </th>\n          <th>\n            <button onClick={() => requestSort('age')}>Age</button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {sortedData.map((row) => (\n          <tr key={row.id}>\n            <td>{row.name}</td>\n            <td>{row.age}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default SortableTable;"
    },
    {
      "title": "Search Filter",
      "description": "Filter data in a table based on user input.",
      "example": "import React, { useState } from 'react';\n\nfunction SearchableTable() {\n  const [search, setSearch] = useState('');\n  const data = [\n    { id: 1, name: 'John Doe', age: 28 },\n    { id: 2, name: 'Jane Smith', age: 32 }\n  ];\n\n  const filteredData = data.filter((row) => row.name.toLowerCase().includes(search.toLowerCase()));\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search by name\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n      />\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredData.map((row) => (\n            <tr key={row.id}>\n              <td>{row.name}</td>\n              <td>{row.age}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SearchableTable;"
    },
    {
      "title": "Pagination",
      "description": "Display paginated data with next and previous controls.",
      "example": "import React, { useState } from 'react';\n\nfunction PaginatedTable() {\n  const data = Array.from({ length: 50 }, (_, i) => ({ id: i + 1, name: `Name ${i + 1}`, age: 20 + (i % 10) }));\n  const [currentPage, setCurrentPage] = useState(1);\n  const rowsPerPage = 10;\n\n  const indexOfLastRow = currentPage * rowsPerPage;\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n  const currentRows = data.slice(indexOfFirstRow, indexOfLastRow);\n\n  const totalPages = Math.ceil(data.length / rowsPerPage);\n\n  return (\n    <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentRows.map((row) => (\n            <tr key={row.id}>\n              <td>{row.name}</td>\n              <td>{row.age}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div>\n        <button\n          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\n          disabled={currentPage === 1}\n        >\n          Previous\n        </button>\n        <span> Page {currentPage} of {totalPages} </span>\n        <button\n          onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}\n          disabled={currentPage === totalPages}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default PaginatedTable;"
    },
    {
      "title": "Basic Form Handling",
      "description": "A form with input fields and submit handling.",
      "example": "import React, { useState } from 'react';\n\nfunction BasicForm() {\n  const [formData, setFormData] = useState({ name: '', email: '' });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n        />\n      </div>\n      <div>\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n        />\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default BasicForm;"
    },
    {
      "title": "Controlled Component with Validation",
      "description": "A form with validation on inputs.",
      "example": "import React, { useState } from 'react';\n\nfunction FormWithValidation() {\n  const [formData, setFormData] = useState({ email: '', password: '' });\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const validate = () => {\n    const newErrors = {};\n    if (!formData.email.includes('@')) newErrors.email = 'Invalid email';\n    if (formData.password.length < 6) newErrors.password = 'Password too short';\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) console.log('Submitted:', formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n        />\n        {errors.email && <span>{errors.email}</span>}\n      </div>\n      <div>\n        <label>Password:</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n        />\n        {errors.password && <span>{errors.password}</span>}\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default FormWithValidation;"
    },
    {
      "title": "Dynamic Form Fields",
      "description": "Add or remove form fields dynamically.",
      "example": "import React, { useState } from 'react';\n\nfunction DynamicForm() {\n  const [fields, setFields] = useState([{ value: '' }]);\n\n  const handleChange = (index, value) => {\n    const newFields = fields.map((field, i) => (i === index ? { value } : field));\n    setFields(newFields);\n  };\n\n  const addField = () => setFields([...fields, { value: '' }]);\n\n  const removeField = (index) => setFields(fields.filter((_, i) => i !== index));\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(fields);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {fields.map((field, index) => (\n        <div key={index}>\n          <input\n            type=\"text\"\n            value={field.value}\n            onChange={(e) => handleChange(index, e.target.value)}\n          />\n          <button type=\"button\" onClick={() => removeField(index)}>Remove</button>\n        </div>\n      ))}\n      <button type=\"button\" onClick={addField}>Add Field</button>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default DynamicForm;"
    },
    {
      "title": "Searchable Dropdown",
      "description": "A dropdown with a search feature.",
      "example": "import React, { useState } from 'react';\n\nfunction SearchableDropdown() {\n  const options = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry'];\n  const [search, setSearch] = useState('');\n  const [selected, setSelected] = useState('');\n\n  const filteredOptions = options.filter((option) =>\n    option.toLowerCase().includes(search.toLowerCase())\n  );\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n      />\n      <ul>\n        {filteredOptions.map((option) => (\n          <li key={option} onClick={() => setSelected(option)}>\n            {option}\n          </li>\n        ))}\n      </ul>\n      {selected && <p>Selected: {selected}</p>}\n    </div>\n  );\n}\n\nexport default SearchableDropdown;"
    },
    {
      "title": "Modal",
      "description": "A simple modal dialog component.",
      "example": "import React, { useState } from 'react';\n\nfunction Modal() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>Open Modal</button>\n      {isOpen && (\n        <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0,0,0,0.5)' }}>\n          <div style={{ margin: '15% auto', padding: '20px', background: 'white', width: '300px' }}>\n            <p>Modal Content</p>\n            <button onClick={() => setIsOpen(false)}>Close</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Modal;"
    },
    {
      "title": "Toast Notifications",
      "description": "Show success or error messages using toast notifications.",
      "example": "import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ToastExample() {\n  const notifySuccess = () => toast.success('Success!');\n  const notifyError = () => toast.error('Error!');\n\n  return (\n    <div>\n      <button onClick={notifySuccess}>Show Success</button>\n      <button onClick={notifyError}>Show Error</button>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default ToastExample;"
    },
    {
      "title": "Sorting Table",
      "description": "A table with sorting functionality by column.",
      "example": "import React, { useState } from 'react';\n\nfunction SortableTable() {\n  const [data, setData] = useState([\n    { id: 1, name: 'John Doe', age: 28 },\n    { id: 2, name: 'Jane Smith', age: 34 },\n    { id: 3, name: 'Alex Johnson', age: 22 },\n  ]);\n  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'asc' });\n\n  const sortData = (key) => {\n    const direction = sortConfig.direction === 'asc' ? 'desc' : 'asc';\n    const sortedData = [...data].sort((a, b) => {\n      if (a[key] < b[key]) return direction === 'asc' ? -1 : 1;\n      if (a[key] > b[key]) return direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n    setSortConfig({ key, direction });\n    setData(sortedData);\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th onClick={() => sortData('name')}>Name</th>\n          <th onClick={() => sortData('age')}>Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row) => (\n          <tr key={row.id}>\n            <td>{row.name}</td>\n            <td>{row.age}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default SortableTable;"
    },
    {
      "title": "Handling File Upload",
      "description": "Handle file uploads in React with an input field.",
      "example": "import React, { useState } from 'react';\n\nfunction FileUpload() {\n  const [file, setFile] = useState(null);\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (file) {\n      console.log('File ready for upload:', file);\n    } else {\n      console.log('No file selected');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button type=\"submit\">Upload</button>\n    </form>\n  );\n}\n\nexport default FileUpload;"
    },
    {
      "title": "LocalStorage with useEffect",
      "description": "Store data in localStorage and retrieve it.",
      "example": "import React, { useState, useEffect } from 'react';\n\nfunction LocalStorageExample() {\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    const storedValue = localStorage.getItem('myData');\n    if (storedValue) setValue(storedValue);\n  }, []);\n\n  const handleChange = (e) => setValue(e.target.value);\n\n  const handleSave = () => {\n    localStorage.setItem('myData', value);\n    console.log('Data saved to localStorage');\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n      />\n      <button onClick={handleSave}>Save to LocalStorage</button>\n    </div>\n  );\n}\n\nexport default LocalStorageExample;"
    },
    {
      "title": "Authentication (Login/Signup) with JWT",
      "description": "Authentication with login and signup forms in React using fetch API to communicate with a Node.js backend. Includes JWT storage and dynamic form switching.",
      "example": "import React, { useState } from 'react';\n\nfunction Authentication() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [formData, setFormData] = useState({ email: '', password: '', name: '', age: '', mobile: '' });\n  const [message, setMessage] = useState('');\n  const [token, setToken] = useState('');\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevState) => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const endpoint = isLogin ? '/login' : '/register';\n    const payload = isLogin\n      ? { email: formData.email, password: formData.password }\n      : { email: formData.email, password: formData.password, name: formData.name, age: formData.age, mobile: formData.mobile };\n\n    try {\n      const response = await fetch(`http://localhost:8000${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message);\n        if (isLogin) setToken(data.token); // Save the token on login\n      } else {\n        setMessage(data.message || 'Something went wrong');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessage('Error connecting to the server');\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: '400px', margin: 'auto', textAlign: 'center' }}>\n      <h2>{isLogin ? 'Login' : 'Signup'}</h2>\n      {message && <p>{message}</p>}\n      <form onSubmit={handleSubmit}>\n        {!isLogin && (\n          <>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleInputChange}\n              placeholder=\"Name\"\n              required\n            />\n            <input\n              type=\"number\"\n              name=\"age\"\n              value={formData.age}\n              onChange={handleInputChange}\n              placeholder=\"Age\"\n              required\n            />\n            <input\n              type=\"text\"\n              name=\"mobile\"\n              value={formData.mobile}\n              onChange={handleInputChange}\n              placeholder=\"Mobile\"\n              required\n            />\n          </>\n        )}\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleInputChange}\n          placeholder=\"Email\"\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleInputChange}\n          placeholder=\"Password\"\n          required\n        />\n        <button type=\"submit\">{isLogin ? 'Login' : 'Signup'}</button>\n      </form>\n      <button onClick={() => {\n        setIsLogin(!isLogin);\n        setMessage('');\n      }}>\n        Switch to {isLogin ? 'Signup' : 'Login'}\n      </button>\n      {token && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>JWT Token:</h3>\n          <textarea\n            readOnly\n            value={token}\n            style={{ width: '100%', height: '100px' }}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Authentication;"
    },
    {
      "title": "Fetch and Display User Profile",
      "description": "Fetch and display the authenticated user's profile using the Node.js backend `/profile` endpoint.",
      "example": "import React, { useState, useEffect } from 'react';\n\nfunction Profile() {\n  const [profile, setProfile] = useState(null);\n  const [error, setError] = useState('');\n  const token = localStorage.getItem('jwtToken'); // Assuming token is stored in localStorage\n\n  useEffect(() => {\n    if (!token) {\n      setError('No token found. Please log in.');\n      return;\n    }\n\n    const fetchProfile = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/profile', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch profile');\n        }\n\n        const data = await response.json();\n        if (data.dp) {\n          // If dp is a Base64 string, convert it to a displayable image source\n          data.dp = `data:image/jpeg;base64,${data.dp}`;\n        }\n        setProfile(data);\n      } catch (err) {\n        console.error(err);\n        setError('Error fetching profile');\n      }\n    };\n\n    fetchProfile();\n  }, [token]);\n\n  if (error) {\n    return <p style={{ color: 'red' }}>{error}</p>;\n  }\n\n  if (!profile) {\n    return <p>Loading profile...</p>;\n  }\n\n  return (\n    <div style={{ maxWidth: '400px', margin: 'auto', textAlign: 'center' }}>\n      <h2>Profile</h2>\n      {profile.dp && <img src={profile.dp} alt=\"Profile\" style={{ width: '100px', height: '100px', borderRadius: '50%' }} />}\n      <p><strong>Name:</strong> {profile.name}</p>\n      <p><strong>Email:</strong> {profile.email}</p>\n      <p><strong>Age:</strong> {profile.age}</p>\n      <p><strong>Mobile:</strong> {profile.mobile}</p>\n    </div>\n  );\n}\n\nexport default Profile;"
    }
    
    
  ]
}
