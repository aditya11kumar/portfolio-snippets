{
    "features": [
      {
        "title": "Type Annotations",
        "description": "Allows you to specify the type of a variable, function parameter, or return value.",
        "example": "let age: number = 25;\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}"
      },
      {
        "title": "Interfaces",
        "description": "Defines the shape of an object, including properties and methods.",
        "example": "interface User {\n  name: string;\n  age: number;\n  greet(): void;\n}\nconst user: User = {\n  name: 'John',\n  age: 30,\n  greet() {\n    console.log('Hello!');\n  }\n};"
      },
      {
        "title": "Classes and Access Modifiers",
        "description": "Enhances object-oriented programming with private, protected, and public access levels.",
        "example": "class Person {\n  private name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  public greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n}\nconst john = new Person('John');\njohn.greet();"
      },
      {
        "title": "Enums",
        "description": "Defines a set of named constants.",
        "example": "enum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right\n}\nlet move: Direction = Direction.Up;\nconsole.log(move); // 1"
      },
      {
        "title": "Generics",
        "description": "Enables type-safe and reusable components.",
        "example": "function identity<T>(value: T): T {\n  return value;\n}\nconst result = identity<string>('Hello');\nconsole.log(result);"
      },
      {
        "title": "Type Aliases",
        "description": "Gives a type a new name for readability and reuse.",
        "example": "type Point = { x: number; y: number };\nconst point: Point = { x: 10, y: 20 };"
      },
      {
        "title": "Modules and Namespaces",
        "description": "Encapsulates code into reusable modules or namespaces for better organization.",
        "example": "// Export\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n// Import\nimport { add } from './math';\nconsole.log(add(2, 3));"
      },
      {
        "title": "Union and Intersection Types",
        "description": "Combines multiple types into one.",
        "example": "// Union\nlet value: string | number;\nvalue = 'Hello';\nvalue = 42;\n\n// Intersection\ntype Admin = { admin: boolean };\ntype User = { name: string };\ntype AdminUser = Admin & User;\nconst adminUser: AdminUser = { admin: true, name: 'John' };"
      },
      {
        "title": "Utility Types",
        "description": "Predefined types that help manipulate types easily.",
        "example": "// Partial\ninterface Todo {\n  title: string;\n  completed: boolean;\n}\nconst todo: Partial<Todo> = { title: 'Learn TypeScript' };\n\n// Readonly\nconst readonlyTodo: Readonly<Todo> = { title: 'Learn TypeScript', completed: false };"
      },
      {
        "title": "Type Guards",
        "description": "Ensures type correctness during runtime using conditional checks.",
        "example": "function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\nif (isString('hello')) {\n  console.log('It is a string');\n}"
      },
      {
        "title": "Mapped Types",
        "description": "Allows creation of new types by mapping over existing types.",
        "example": "type User = {\n  id: number;\n  name: string;\n};\ntype ReadonlyUser = {\n  readonly [K in keyof User]: User[K];\n};"
      },
      {
        "title": "Never Type",
        "description": "Represents a value that will never occur.",
        "example": "function error(message: string): never {\n  throw new Error(message);\n}"
      },
      {
        "title": "Decorators",
        "description": "Special syntax for modifying classes and members.",
        "example": "function Log(target: any, key: string) {\n  console.log(`${key} was accessed`);\n}\nclass User {\n  @Log\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}"
      },
      {
        "title": "Module Resolution",
        "description": "Supports modular code by importing and exporting components.",
        "example": "// user.ts\nexport interface User {\n  name: string;\n}\n// app.ts\nimport { User } from './user';\nconst user: User = { name: 'John' };"
      },
      {
        "title": "Type Assertions",
        "description": "Forces TypeScript to treat a value as a specific type.",
        "example": "let value: any = 'hello';\nlet strLength: number = (value as string).length;\nconsole.log(strLength);"
      },
      {
        "title": "Optional and Default Properties",
        "description": "Defines properties that may or may not be present, with defaults if missing.",
        "example": "interface User {\n  name: string;\n  age?: number;\n}\nconst user: User = { name: 'Alice' };"
      },
      {
        "title": "Readonly and Const",
        "description": "Prevents reassignment of variables or modification of object properties.",
        "example": "interface User {\n  readonly id: number;\n  name: string;\n}\nconst user: User = { id: 1, name: 'Alice' };\nuser.name = 'Bob'; // Allowed\nuser.id = 2; // Error"
      },
      {
        "title": "Error Handling with TypeScript",
        "description": "Ensures type safety with exceptions and custom error objects.",
        "example": "class CustomError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'CustomError';\n  }\n}\ntry {\n  throw new CustomError('Something went wrong!');\n} catch (error) {\n  console.error(error.message);\n}"
      },
      {
        "title": "Non-Null Assertion",
        "description": "Asserts that a value is not null or undefined.",
        "example": "const value: string | null = 'hello';\nconsole.log(value!); // Non-null assertion"
      },
      {
        "title": "Discriminated Unions",
        "description": "A union of types that share a common property.",
        "example": "interface Circle {\n  kind: 'circle';\n  radius: number;\n}\ninterface Rectangle {\n  kind: 'rectangle';\n  width: number;\n  height: number;\n}\ntype Shape = Circle | Rectangle;\nfunction area(shape: Shape): number {\n  if (shape.kind === 'circle') {\n    return Math.PI * shape.radius ** 2;\n  }\n  return shape.width * shape.height;\n}"
      },
      {
        "title": "Advanced Tuple Types",
        "description": "Adds labels and supports variable-length tuple types.",
        "example": "type Point = [x: number, y: number];\nconst point: Point = [10, 20];\n\n// Variable-length tuple\ntype List = [number, ...string[]];\nconst list: List = [1, 'a', 'b', 'c'];"
      },
      {
        "title": "Tooling and Configuration",
        "description": "Uses tsconfig.json for compiler options and linting tools like ESLint for better developer experience.",
        "example": "// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  }\n}"
      }
    ]
  }
  